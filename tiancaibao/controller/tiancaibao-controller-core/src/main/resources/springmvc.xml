<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task
   		http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://code.alibabatech.com/schema/dubbo        
		http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
		
<!-- 		<beans xmlns="http://www.springframework.org/schema/beans"   -->
<!--     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  -->
<!--     xmlns:context="http://www.springframework.org/schema/context"   -->
<!--     xmlns:mvc="http://www.springframework.org/schema/mvc"   -->
<!--     xsi:schemaLocation="http://www.springframework.org/schema/beans   -->
<!--      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   -->
<!--      http://www.springframework.org/schema/context   -->
<!--      http://www.springframework.org/schema/context/spring-context-3.0.xsd   -->
<!--      http://www.springframework.org/schema/mvc   -->
<!--      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">   -->
		
		
		
		
		
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/*.properties</value>
			</list>
		</property>
	</bean>
 	<mvc:interceptors>  
    <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->  
     <bean class="com.tiancaibao.intercept.SpringMVCInterceptor"/>  
<!--     <mvc:interceptor>   -->
<!--         <mvc:mapping path="/*"/>   -->
        <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->  
<!--         <bean class="com.host.app.web.interceptor.LoginInterceptor"/>   -->
<!--     </mvc:interceptor>   -->
 </mvc:interceptors> 

	


		<context:component-scan base-package="com.tiancaibao.controller" />
		<!-- 配置处理器映射器、适配器 -->
		<!-- <mvc:annotation-driven /> -->
		<!-- json乱码 -->
		<mvc:annotation-driven>
			<!--@ResponseBody乱码 -->
			<mvc:message-converters register-defaults="true">
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes" value="text/html;charset=UTF-8" />
				</bean>
			</mvc:message-converters>
		</mvc:annotation-driven>
		<!-- 表示使用cglib，而非JDK的动态代理，因为Controller没有实现接口，所以要配置这里 -->
		<aop:aspectj-autoproxy proxy-target-class="true" />
		<!-- 配置视图解析器 -->
		<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/" />
			<property name="suffix" value=".jsp" />
		</bean>

		<!-- 加载dubbo配置文件 -->
		<import resource="classpath:dubbo-consumer.xml" />
		<!-- <import resource="classpath:mq-register-provider.xml" /> -->
		<import resource="classpath:redis.xml" />

</beans>