<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tiancaibao.mapper.debt.DebtCurrentReceiveMapper">
	<resultMap id="BaseResultMap" type="com.tiancaibao.pojo.debt.DebtCurrentReceive">
		<!-- -->
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="user_id" jdbcType="BIGINT" property="userId" />
		<result column="debt_original_asset_id" jdbcType="BIGINT"
			property="debtOriginalAssetId" />
		<result column="invest_id" jdbcType="BIGINT" property="investId" />
		<result column="transfer_user_id" jdbcType="BIGINT" property="transferUserId" />
		<result column="principal" jdbcType="BIGINT" property="principal" />
		<result column="interest" jdbcType="BIGINT" property="interest" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="request_no" jdbcType="VARCHAR" property="requestNo" />
		<result column="count" jdbcType="INTEGER" property="count" />
		<result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
		<result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
		<result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt" />
		<result column="transfer_id" jdbcType="BIGINT" property="transferId" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- -->
		id, user_id, debt_original_asset_id, invest_id, transfer_user_id,
		principal, interest,
		status, request_no, count, created_at, updated_at, deleted_at, transfer_id
	</sql>
	<select id="selectByExample" parameterType="com.tiancaibao.pojo.debt.DebtCurrentReceiveExample"
		resultMap="BaseResultMap">
		<!-- -->
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from debt_current_receive
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		<!-- -->
		select
		<include refid="Base_Column_List" />
		from debt_current_receive
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		<!-- -->
		delete from debt_current_receive
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<delete id="deleteByExample" parameterType="com.tiancaibao.pojo.debt.DebtCurrentReceiveExample">
		<!-- -->
		delete from debt_current_receive
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.tiancaibao.pojo.debt.DebtCurrentReceive">
		<!-- -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into debt_current_receive (user_id, debt_original_asset_id,
		invest_id,
		transfer_user_id, principal, interest,
		status, request_no, count,
		created_at, updated_at, deleted_at,
		transfer_id)
		values (#{userId,jdbcType=BIGINT}, #{debtOriginalAssetId,jdbcType=BIGINT},
		#{investId,jdbcType=BIGINT},
		#{transferUserId,jdbcType=BIGINT}, #{principal,jdbcType=BIGINT}, #{interest,jdbcType=BIGINT},
		#{status,jdbcType=INTEGER}, #{requestNo,jdbcType=VARCHAR},
		#{count,jdbcType=INTEGER},
		#{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{deletedAt,jdbcType=TIMESTAMP},
		#{transferId,jdbcType=BIGINT})
	</insert>
	<insert id="insertSelective" parameterType="com.tiancaibao.pojo.debt.DebtCurrentReceive">
		<!-- -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into debt_current_receive
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				user_id,
			</if>
			<if test="debtOriginalAssetId != null">
				debt_original_asset_id,
			</if>
			<if test="investId != null">
				invest_id,
			</if>
			<if test="transferUserId != null">
				transfer_user_id,
			</if>
			<if test="principal != null">
				principal,
			</if>
			<if test="interest != null">
				interest,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="requestNo != null">
				request_no,
			</if>
			<if test="count != null">
				count,
			</if>
			<if test="createdAt != null">
				created_at,
			</if>
			<if test="updatedAt != null">
				updated_at,
			</if>
			<if test="deletedAt != null">
				deleted_at,
			</if>
			<if test="transferId != null">
				transfer_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				#{userId,jdbcType=BIGINT},
			</if>
			<if test="debtOriginalAssetId != null">
				#{debtOriginalAssetId,jdbcType=BIGINT},
			</if>
			<if test="investId != null">
				#{investId,jdbcType=BIGINT},
			</if>
			<if test="transferUserId != null">
				#{transferUserId,jdbcType=BIGINT},
			</if>
			<if test="principal != null">
				#{principal,jdbcType=BIGINT},
			</if>
			<if test="interest != null">
				#{interest,jdbcType=BIGINT},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="requestNo != null">
				#{requestNo,jdbcType=VARCHAR},
			</if>
			<if test="count != null">
				#{count,jdbcType=INTEGER},
			</if>
			<if test="createdAt != null">
				#{createdAt,jdbcType=TIMESTAMP},
			</if>
			<if test="updatedAt != null">
				#{updatedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="deletedAt != null">
				#{deletedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="transferId != null">
				#{transferId,jdbcType=BIGINT},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.tiancaibao.pojo.debt.DebtCurrentReceiveExample"
		resultType="java.lang.Long">
		<!-- -->
		select count(*) from debt_current_receive
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- -->
		update debt_current_receive
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=BIGINT},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=BIGINT},
			</if>
			<if test="record.debtOriginalAssetId != null">
				debt_original_asset_id = #{record.debtOriginalAssetId,jdbcType=BIGINT},
			</if>
			<if test="record.investId != null">
				invest_id = #{record.investId,jdbcType=BIGINT},
			</if>
			<if test="record.transferUserId != null">
				transfer_user_id = #{record.transferUserId,jdbcType=BIGINT},
			</if>
			<if test="record.principal != null">
				principal = #{record.principal,jdbcType=BIGINT},
			</if>
			<if test="record.interest != null">
				interest = #{record.interest,jdbcType=BIGINT},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=INTEGER},
			</if>
			<if test="record.requestNo != null">
				request_no = #{record.requestNo,jdbcType=VARCHAR},
			</if>
			<if test="record.count != null">
				count = #{record.count,jdbcType=INTEGER},
			</if>
			<if test="record.createdAt != null">
				created_at = #{record.createdAt,jdbcType=TIMESTAMP},
			</if>
			<if test="record.updatedAt != null">
				updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="record.deletedAt != null">
				deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="record.transferId != null">
				transfer_id = #{record.transferId,jdbcType=BIGINT},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- -->
		update debt_current_receive
		set id = #{record.id,jdbcType=BIGINT},
		user_id = #{record.userId,jdbcType=BIGINT},
		debt_original_asset_id = #{record.debtOriginalAssetId,jdbcType=BIGINT},
		invest_id = #{record.investId,jdbcType=BIGINT},
		transfer_user_id = #{record.transferUserId,jdbcType=BIGINT},
		principal = #{record.principal,jdbcType=BIGINT},
		interest = #{record.interest,jdbcType=BIGINT},
		status = #{record.status,jdbcType=INTEGER},
		request_no = #{record.requestNo,jdbcType=VARCHAR},
		count = #{record.count,jdbcType=INTEGER},
		created_at = #{record.createdAt,jdbcType=TIMESTAMP},
		updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
		deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
		transfer_id = #{record.transferId,jdbcType=BIGINT}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.tiancaibao.pojo.debt.DebtCurrentReceive">
		<!-- -->
		update debt_current_receive
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=BIGINT},
			</if>
			<if test="debtOriginalAssetId != null">
				debt_original_asset_id = #{debtOriginalAssetId,jdbcType=BIGINT},
			</if>
			<if test="investId != null">
				invest_id = #{investId,jdbcType=BIGINT},
			</if>
			<if test="transferUserId != null">
				transfer_user_id = #{transferUserId,jdbcType=BIGINT},
			</if>
			<if test="principal != null">
				principal = #{principal,jdbcType=BIGINT},
			</if>
			<if test="interest != null">
				interest = #{interest,jdbcType=BIGINT},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="requestNo != null">
				request_no = #{requestNo,jdbcType=VARCHAR},
			</if>
			<if test="count != null">
				count = #{count,jdbcType=INTEGER},
			</if>
			<if test="createdAt != null">
				created_at = #{createdAt,jdbcType=TIMESTAMP},
			</if>
			<if test="updatedAt != null">
				updated_at = #{updatedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="deletedAt != null">
				deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
			</if>
			<if test="transferId != null">
				transfer_id = #{transferId,jdbcType=BIGINT},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.tiancaibao.pojo.debt.DebtCurrentReceive">
		<!-- -->
		update debt_current_receive
		set user_id = #{userId,jdbcType=BIGINT},
		debt_original_asset_id = #{debtOriginalAssetId,jdbcType=BIGINT},
		invest_id = #{investId,jdbcType=BIGINT},
		transfer_user_id = #{transferUserId,jdbcType=BIGINT},
		principal = #{principal,jdbcType=BIGINT},
		interest = #{interest,jdbcType=BIGINT},
		status = #{status,jdbcType=INTEGER},
		request_no = #{requestNo,jdbcType=VARCHAR},
		count = #{count,jdbcType=INTEGER},
		created_at = #{createdAt,jdbcType=TIMESTAMP},
		updated_at = #{updatedAt,jdbcType=TIMESTAMP},
		deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
		transfer_id = #{transferId,jdbcType=BIGINT}
		where id = #{id,jdbcType=BIGINT}
	</update>
	<!-- 添加记录成功后的ID -->
	<select id="getLastInsertId" resultType="long">
		SELECT LAST_INSERT_ID()
	</select>
</mapper>